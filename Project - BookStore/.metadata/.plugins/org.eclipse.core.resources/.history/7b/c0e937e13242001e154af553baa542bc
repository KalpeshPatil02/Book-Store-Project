package com.DAO;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.List;

import com.entity.Book_order;
import com.entity.cart;

public class BookOrderImpl implements BookOrderDao {

	private Connection conn;

	public BookOrderImpl(Connection connection) {
		this.conn = connection; // Assign the connection parameter to the conn field
	}

	@Override
	public int getOrderNo() {

		int i = 0;

		try {

			String query = "SELECT * FROM bookorders;";
			PreparedStatement ps = conn.prepareStatement(query);

			ResultSet rs = ps.executeQuery();

			while (rs.next()) {
				i++;
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return i;

	}

//	--------------------------------------------------------------------------------------------------------------------------------
	@Override
	public boolean saveOrder(List<Book_order> blist) {
	    boolean f = false;

	    try {
	        String query = "INSERT INTO bookorders (`order_id`, `user_name`, `email`, `address`, `phone`, `book_names`, `authors`, `price`, `payment`)"
	                + " VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
	        conn.setAutoCommit(false);
	        PreparedStatement ps = conn.prepareStatement(query);

	        StringBuilder bookNames = new StringBuilder();
	        StringBuilder authors = new StringBuilder();
	        
	        for (Book_order b : blist) {
	            ps.setString(1, b.getOrderId());
	            ps.setString(2, b.getUsername());
	            ps.setString(3, b.getEmail());
	            ps.setString(4, b.getFullAdd());
	            ps.setString(5, b.getPhone());

	            bookNames.append(b.getBookName()).append(", ");
	            authors.append(b.getAuthor()).append(", ");
	            
	            ps.setString(8, b.getPrice());
	            ps.setString(9, b.getPayment());
	            ps.addBatch();
	        }
	        
	        // Remove trailing comma and space
	        String concatenatedBookNames = bookNames.toString();
	        if (concatenatedBookNames.endsWith(", ")) {
	            concatenatedBookNames = concatenatedBookNames.substring(0, concatenatedBookNames.length() - 2);
	        }
	        String concatenatedAuthors = authors.toString();
	        if (concatenatedAuthors.endsWith(", ")) {
	            concatenatedAuthors = concatenatedAuthors.substring(0, concatenatedAuthors.length() - 2);
	        }

	        // Set the concatenated values for the whole order
	        ps.setString(6, concatenatedBookNames);
	        ps.setString(7, concatenatedAuthors);

	        int[] count = ps.executeBatch();
	        conn.commit();
	        f = true;

	        conn.setAutoCommit(true);
	    } catch (Exception e) {
	        e.printStackTrace();
	    }

	    return f;
	}

}
